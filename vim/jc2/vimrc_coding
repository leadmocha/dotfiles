"" First things first. Load up any system files if they exist
"" Ubuntu/Debian systems
"if filereadable('/etc/vim/vimrc')
"  source /etc/vim/vimrc
"endif

"" Fedora based systems
"if filereadable('/etc/vimrc')
"  source /etc/vimrc
"endif

"" Load up a plugin manager (Pathogen)
"" If pathogen not already loaded by the user, go ahead and load
"" it now
if g:JC2LoadPathogen
  if v:version >= 700
    try
      execute pathogen#infect()
    catch
      let g:JC2LoadPathogen=0
    endtry
  else
    ""If too old a vim, then just try to execute it anyways
    execute pathogen#infect()
  endif
endif

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
"" Now make changes as needed

"" Auto-format comments while typing
set fo+=r

"" Disable folds by default
set nofoldenable

"" Set file formats ??
"set fileformats="unix,macs,dos"

"" Show matching brackets
set showmatch

"set bs=2               " allow backspacing over everything
"set smartindent        " smart indenting
filetype plugin indent on

"" Enable spell check
set spellfile=~/.vim/spellfile.add
set spelllang=en_us

"" Display line numbers by default
set number

"" Enable 256 colors by default. I think this is a good estimate for modern
"" terminals now.
set t_Co=256

"" A tab should be represented by 2 spaces.
set expandtab " Convert tabs into spaces
set tabstop=2 " A tab represents this many spaces
set shiftwidth=2  " Like tabstop but for indentations
set softtabstop=2 " Formatting tabstops

"" Set the encoding to UTF-8 so that all characters/symbols show up correctly
set encoding=utf-8

"" Higlight special characters with other special characters :D
"set list listchars=tab:ÃÂ»ÃÂ·,trail:ÃÂ· 
"set list listchars=tab:Â»Â·,trail:Â·Â·
set list listchars=tab:»·,trail:· 

" For Neovim 0.1.3 and 0.1.4
let $NVIM_TUI_ENABLE_TRUE_COLOR=1

"" In case the CSApprox plugin is used, configure it now
"" This plugin converts GUI colors to appropriate cterm colors
let g:CSApprox_attr_map = { 'bold' : '', 'italic' : '', 'sp' : '' }
let g:CSApprox_loaded = 1 " Stop loading it for now, disable when I modify the scheme
" Color schemes now set by the normal vimrc file in this 'plugin'
"colorscheme jc2_tir_black " My usual color scheme
"colorscheme jc2_black " My usual color scheme
"colorscheme csapprox_jc2_tir_black " Colors corrected/approximated by CSApprox


" """""""" These are for the OmniComplete feature!!! GREAT!

" configure tags - add additional tags here or comment out not-used ones
"set tags+=~/.vim/tags/cpp
"set tags+=~/.vim/tags/gl
"set tags+=~/.vim/tags/sdl
"set tags+=~/.vim/tags/qt4
"set tags+=~/.vim/tags/root
"set tags+=~/.vim/tags/analyzer
" build tags of your own project with CTRL+F12
map <A-F5> :!ctags -R --c++-kinds=+p --fields=+iaS --extra=+q .<CR>

" OmniCppComplete
let OmniCpp_NamespaceSearch = 1
let OmniCpp_GlobalScopeSearch = 1
let OmniCpp_ShowAccess = 1
let OmniCpp_MayCompleteDot = 1
let OmniCpp_MayCompleteArrow = 1
let OmniCpp_MayCompleteScope = 1
let OmniCpp_DefaultNamespaces = ["std", "_GLIBCXX_STD"]
" automatically open and close the popup menu / preview window
au CursorMovedI,InsertLeave * if pumvisible() == 0|silent! pclose|endif
set completeopt=menuone,menu,longest,preview

" To make mouse work with TMUX
"set mouse=a


"" Load up powerline if config exists
if filereadable(expand( g:JC2Local . "/vimrc_coding_powerline"))
  exe "source " . g:JC2Local . "/vimrc_coding_powerline"
endif

"" Load up "local" configurations if the file exists
if filereadable(expand(g:JC2Local.'/vimrc_coding_local'))
  exe "source " . g:JC2Local.'/vimrc_coding_local'
endif


"" Configure indentLine plugin
"" Commented out, use default
"let g:indentLine_char='Ã¯Â¸Â'
"let g:indentLine_color_term=244

"" Configure the eclim pluggin
"let g:EclimLoclistSignText='ÃÂ»ÃÂ·'
"let g:EclimLoclistSignText='»·'
let g:EclimLoclistSignText = "\u00BB"
let g:EclimInfoHighlight = 'Normal'
let g:EclimWarningHighlight = 'Normal'
let g:EclimErrorHighlight = 'Normal'
let g:EclimXmlValidate=0 " Disable XML validation by default
let g:EclimCSearchSingleResult  = 'tab drop'

"" A function so that syntax highlighting can work inside a JLab's XML Batch
"" submission script
function! JLabXMLBatchBash() abort
  let b:current_syntax = ""
  unlet b:current_syntax
  runtime! syntax/xml.vim

  " Include XML syntax
  let b:current_syntax = ""
  unlet b:current_syntax
  syntax include @XML syntax/xml.vim

  " Include the shell syntax
  let b:current_syntax = ""
  unlet b:current_syntax
  syntax include @SHELL syntax/sh.vim
  syntax region bashSnip matchgroup=Snip start="<Command>" end="</Command>" containedin=@XML contains=@SHELL
  hi link Snip SpecialComment
endfunction
" Call JLabXMLBatchBash immediately after loading an XML file
augroup xmlFileType
  autocmd! FileType xml :call JLabXMLBatchBash()
augroup END

"" Open up new split tabs either blow or at the right by default
set splitbelow
set splitright

"" Define a new function to quickly fix syntax highlighting issues caused
"" by splits
function FixSyntax()
  syntax sync fromstart
endfunction

" Display hihlighting info of character/word under cursor
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

" Display the current colors used for word/character under cursor
function! SynColor()
  echo "fg=" . synIDattr(synIDtrans(synID(line("."), col("."), 1)), "fg") . ", bg=" synIDattr(synIDtrans(synID(line("."), col("."), 1)), "bg")
endfunc
